import { useEffect, useState } from 'react';
import { useSearchParams } from 'react-router-dom';

interface ReferralCodeHook {
  referralCode: string | null;
  isLoading: boolean;
  saveReferralCode: (code: string) => void;
  clearReferralCode: () => void;
}

export const useReferralCode = (): ReferralCodeHook => {
  const [referralCode, setReferralCode] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [searchParams, setSearchParams] = useSearchParams(); // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ setSearchParams –¥–ª—è –æ—á–∏—Å—Ç–∫–∏

  const getReferralCode = (): string | null => {
    try {
      const code = localStorage.getItem('referralCode');
      const expiry = localStorage.getItem('referralCodeExpiry');

      if (code && expiry) {
        const expiryTime = parseInt(expiry);
        if (Date.now() < expiryTime) {
          return code;
        } else {
          localStorage.removeItem('referralCode');
          localStorage.removeItem('referralCodeExpiry');
        }
      }

      return null;
    } catch (error) {
      console.error('Error getting referral code:', error);
      return null;
    }
  };

  const saveReferralCode = (code: string): void => {
    try {
      localStorage.setItem('referralCode', code);
      const expiryTime = Date.now() + (30 * 24 * 60 * 60 * 1000); // 30 –¥–Ω–µ–π
      localStorage.setItem('referralCodeExpiry', expiryTime.toString());
      setReferralCode(code);
      console.log('üîó Referral code saved:', code);
    } catch (error) {
      console.error('Error saving referral code:', error);
    }
  };

  const clearReferralCode = (): void => {
    try {
      localStorage.removeItem('referralCode');
      localStorage.removeItem('referralCodeExpiry');
      setReferralCode(null);
    } catch (error) {
      console.error('Error clearing referral code:', error);
    }
  };

  useEffect(() => {
    setIsLoading(true);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const urlReferralCode = searchParams.get('ref') || searchParams.get('code');

    if (urlReferralCode) {
      saveReferralCode(urlReferralCode);

      // –û—á–∏—â–∞–µ–º URL –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º setSearchParams –¥–ª—è React Router)
      setSearchParams((params) => {
        params.delete('ref');
        params.delete('code');
        return params;
      }, { replace: true }); // replace: true ‚Äî —á—Ç–æ–±—ã –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
    } else {
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–¥
      const savedCode = getReferralCode();
      setReferralCode(savedCode);
    }

    setIsLoading(false);
  }, [searchParams, setSearchParams]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç searchParams ‚Äî —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è URL

  return {
    referralCode,
    isLoading,
    saveReferralCode,
    clearReferralCode,
  };
};
