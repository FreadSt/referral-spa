import React, { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import { useToast } from "@/hooks/use-toast";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { db } from "@/lib/firebase";
import {
  doc,
  setDoc,
  getDocs,
  collection,
  query,
  orderBy,
  limit,
  serverTimestamp,
} from "firebase/firestore";
import { getFunctions, httpsCallable } from "firebase/functions";

type TTNFormValues = {
  email: string;
  ttn: string;
};

type OrderRow = {
  id: string;
  email: string;
  createdAt: Date | null;
  ttn?: string;
  status?: string;
  receivedAt?: Date | null;
  referralSent?: boolean;
  referralCode?: string;
};

const BindTTN: React.FC = () => {
  const { register, handleSubmit, formState: { errors, isSubmitting }, reset } = useForm<TTNFormValues>();
  const { toast } = useToast();

  const [orders, setOrders] = useState<OrderRow[]>([]);
  const [loadingOrders, setLoadingOrders] = useState(false);
  const [refreshingAll, setRefreshingAll] = useState(false);
  const [expandedRow, setExpandedRow] = useState<string | null>(null);
  const [currentTime, setCurrentTime] = useState(new Date());

  // –í–∞–∂–Ω–æ: —Ä–µ–≥–∏–æ–Ω us-central1, —Ç.–∫. —Ç–≤–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–µ–ø–ª–æ—è—Ç—Å—è —Ç—É–¥–∞
  const functions = getFunctions(undefined, "us-central1");
  const refreshShipmentStatus = httpsCallable(functions, "refreshShipmentStatus");

  const toDateSafe = (v: any): Date | null => {
    try {
      if (!v) return null;
      if (typeof v.toDate === "function") return v.toDate();
      if (v instanceof Date) return v;
      return null;
    } catch {
      return null;
    }
  };

  const fetchOrders = async () => {
    setLoadingOrders(true);
    try {
      // 1) –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã ‚Äî –æ–¥–Ω–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ createdAt –ù–ï —Ç—Ä–µ–±—É–µ—Ç –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
      const ordersSnap = await getDocs(
        query(collection(db, "orders"), orderBy("createdAt", "desc"), limit(100))
      );

      // 2) –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ TTN
      const ttnSnap = await getDocs(collection(db, "ttns"));

      // –°–æ–±–∏—Ä–∞–µ–º map –ø–æ email (–±–µ—Ä—ë–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –ø–æ createdAt, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ)
      const ttnByEmail = new Map<string, { ttn: string; status?: string; createdAt?: Date | null; receivedAt?: Date | null; referralSent?: boolean; referralCode?: string }>();
      ttnSnap.forEach((d) => {
        const t = d.data() as any;
        if (!t?.email) return;
        const current = ttnByEmail.get(t.email);
        const created = toDateSafe(t.createdAt);
        if (!current || (created && (!current.createdAt || created > current.createdAt))) {
          ttnByEmail.set(t.email, {
            ttn: t.ttn || d.id,
            status: t.status,
            createdAt: created,
            receivedAt: toDateSafe(t.receivedAt),
            referralSent: t.referralSent ?? false,
            referralCode: t.referralCode || undefined,
          });
        }
      });

      const rows: OrderRow[] = [];
      ordersSnap.forEach((d) => {
        const data = d.data() as any;
        const email = data.email || "";
        const createdAt = toDateSafe(data.createdAt);
        const link = ttnByEmail.get(email);

        rows.push({
          id: d.id,
          email,
          createdAt,
          ttn: link?.ttn,
          status: link?.status,
          receivedAt: link?.receivedAt,
          referralSent: link?.referralSent,
          referralCode: link?.referralCode,
        });
      });

      setOrders(rows);
    } catch (err) {
      console.error("Error fetching orders:", err);
      toast({
        title: "‚ùå –ü–æ–º–∏–ª–∫–∞",
        description: "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
        variant: "destructive",
      });
    } finally {
      setLoadingOrders(false);
    }
  };

  useEffect(() => {
    fetchOrders();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // –†–µ–∞–ª-—Ç–∞–π–º —Ç–∞–π–º–µ—Ä (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫)
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);
    return () => clearInterval(interval);
  }, []);

  const onSubmit = async (data: TTNFormValues) => {
    try {
      // –í–∏–¥–∞–ª–µ–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, —â–æ–± –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –ø—Ä–∏–≤'—è–∑–∫—É –¥–ª—è –±—É–¥—å-—è–∫–∏—Ö email/TTN

      // –°–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç TTN (id –¥–æ–∫—É–º–µ–Ω—Ç–∞ = –Ω–æ–º–µ—Ä TTN)
      await setDoc(doc(db, "ttns", data.ttn), {
        email: data.email,
        ttn: data.ttn,
        createdAt: serverTimestamp(),
        status: "pending",
      }, { merge: true });

      // –°—Ä–∞–∑—É –¥–µ—Ä–≥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ TTN
      try {
        await refreshShipmentStatus({ ttn: data.ttn });
      } catch (e: any) {
        console.warn("refreshShipmentStatus(ttn) warn:", e?.message || e);
      }

      toast({ title: "‚úÖ –£—Å–ø—ñ—Ö", description: "TTN —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–≤'—è–∑–∞–Ω–æ" });
      reset({ ttn: "", email: data.email });
      await fetchOrders();
    } catch (err: any) {
      console.error("Error in onSubmit:", err);
      toast({
        title: "‚ùå –ü–æ–º–∏–ª–∫–∞",
        description: err?.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–∏–≤'—è–∑–∞—Ç–∏ TTN",
        variant: "destructive",
      });
    }
  };

  const handleRefreshAll = async () => {
    setRefreshingAll(true);
    try {
      // –ü—É—Å—Ç–æ–π payload => —Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ –æ–±–Ω–æ–≤–∏—Ç –≤—Å–µ pending
      const res: any = await refreshShipmentStatus({});
      const updated = res?.data?.updated ?? 0;
      toast({ title: "üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ", description: `–û–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å—ñ–≤: ${updated}` });
      await fetchOrders();
    } catch (err: any) {
      console.error("refreshShipmentStatus error:", err);
      toast({
        title: "‚ùå –ü–æ–º–∏–ª–∫–∞",
        description: err?.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å–∏",
        variant: "destructive",
      });
    } finally {
      setRefreshingAll(false);
    }
  };

  const renderStatus = (status?: string) => {
    if (!status) return "‚Äî";                // –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API / –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏
    if (status === "pending") return "–û—á—ñ–∫—É—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è";
    return status;                          // —Ç–µ–∫—Å—Ç –∏–∑ Nova Poshta (–º–æ–∂–µ—Ç –±—ã—Ç—å ¬´–ù–æ–º–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ¬ª, ¬´–í–∏–¥–∞–Ω–æ¬ª, –∏ —Ç.–ø.)
  };

  const formatTimeLeft = (seconds: number): string => {
    const days = Math.floor(seconds / (3600 * 24));
    const hours = Math.floor((seconds % (3600 * 24)) / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = Math.floor(seconds % 60);
    return `${days}–¥ ${hours}–≥ ${minutes}—Ö–≤ ${secs}—Å`;
  };

  return (
    <div className="px-4 py-8 sm:px-6 lg:px-8">
      {/* –§–æ—Ä–º–∞ */}
      <div className="max-w-md mx-auto bg-white rounded-2xl shadow-lg p-6 sm:p-8 border border-gray-200 mb-8">
        <h1 className="text-2xl font-semibold text-center mb-6">–ü—Ä–∏–≤'—è–∑–∞—Ç–∏ –Ω–æ–º–µ—Ä TTN</h1>
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-5">
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-700">Email</label>
            <Input
              type="email"
              {...register("email", { required: "–í–∫–∞–∂—ñ—Ç—å email" })}
              placeholder="example@email.com"
              className="focus-visible:ring-2 focus-visible:ring-primary"
            />
            {errors.email && <p className="text-sm text-red-500 mt-1">{errors.email.message}</p>}
          </div>

          <div>
            <label className="block mb-1 text-sm font-medium text-gray-700">–ù–æ–º–µ—Ä TTN</label>
            <Input
              type="text"
              {...register("ttn", { required: "–í–∫–∞–∂—ñ—Ç—å TTN" })}
              placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä TTN"
              className="focus-visible:ring-2 focus-visible:ring-primary"
            />
            {errors.ttn && <p className="text-sm text-red-500 mt-1">{errors.ttn.message}</p>}
          </div>

          <Button
            type="submit"
            disabled={isSubmitting}
            className="w-full transition-all duration-150 hover:scale-[1.01]"
          >
            {isSubmitting ? "–û–±—Ä–æ–±–∫–∞..." : "–ü—Ä–∏–≤'—è–∑–∞—Ç–∏ TTN"}
          </Button>
        </form>
      </div>

      {/* –¢–∞–±–ª–∏—Ü–∞ */}
      <div className="bg-white rounded-2xl shadow-lg p-6 border border-gray-200">
        <div className="flex flex-col sm:flex-row justify-between gap-3 sm:items-center mb-4">
          <h2 className="text-xl font-semibold">–°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å</h2>
          <div className="flex gap-2">
            <Button variant="outline" onClick={fetchOrders} disabled={loadingOrders}>
              {loadingOrders ? "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è..." : "üîÅ –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫"}
            </Button>
            <Button variant="secondary" onClick={handleRefreshAll} disabled={refreshingAll}>
              {refreshingAll ? "–û–Ω–æ–≤–ª–µ–Ω–Ω—è..." : "üì¶ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å–∏ TTN"}
            </Button>
          </div>
        </div>

        <div className="overflow-x-auto">
          <table className="min-w-full border border-gray-200">
            <thead>
            <tr className="bg-gray-100 border-b border-gray-200">
              <th className="py-2 px-4 text-left">Email</th>
              <th className="py-2 px-4 text-left">–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è</th>
              <th className="py-2 px-4 text-left">TTN</th>
              <th className="py-2 px-4 text-left">–°—Ç–∞—Ç—É—Å</th>
            </tr>
            </thead>
            <tbody>
            {orders.map((o) => (
              <React.Fragment key={o.id}>
                <tr
                  onClick={() => setExpandedRow(expandedRow === o.id ? null : o.id)}
                  className="border-b border-gray-200 cursor-pointer hover:bg-gray-50"
                >
                  <td className="py-2 px-4">{o.email || "-"}</td>
                  <td className="py-2 px-4">
                    {o.createdAt ? o.createdAt.toLocaleString() : "-"}
                  </td>
                  <td className="py-2 px-4">{o.ttn || "-"}</td>
                  <td className="py-2 px-4">{renderStatus(o.status)}</td>
                </tr>
                {expandedRow === o.id && (
                  <tr>
                    <td colSpan={4} className="p-4 bg-gray-50 border-b border-gray-200">
                      {o.status === "–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ" && o.receivedAt ? (
                        (() => {
                          const deadline = new Date(o.receivedAt.getTime() + 30 * 1000);
                          const timeLeftSeconds = Math.max(0, (deadline.getTime() - currentTime.getTime()) / 1000);
                          if (timeLeftSeconds > 0) {
                            return (
                              <div>
                                <p className="text-sm font-medium text-gray-700">–ó–∞–ª–∏—à–∏–ª–æ—Å—è –¥–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó –ø–æ—Å–∏–ª–∞–Ω–Ω—è:</p>
                                <p className="text-lg font-bold text-primary">{formatTimeLeft(timeLeftSeconds)}</p>
                              </div>
                            );
                          } else if (o.referralSent && o.referralCode) {
                            const baseUrl = window.location.origin; // –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à APP_URL, —è–∫—â–æ —î env
                            const referralLink = `${baseUrl}/?code=${o.referralCode}`;
                            return (
                              <div>
                                <p className="text-sm font-medium text-green-600">‚úÖ –ü–æ—Å–∏–ª–∞–Ω–Ω—è —Å–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ</p>
                                <a href={referralLink} className="text-blue-500 underline" target="_blank" rel="noopener noreferrer">
                                  {referralLink}
                                </a>
                              </div>
                            );
                          } else {
                            return <p className="text-sm text-gray-500">–û—á—ñ–∫—É—î –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó (–æ–Ω–æ–≤—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É)</p>;
                          }
                        })()
                      ) : (
                        <p className="text-sm text-gray-500">–¢–∞–π–º–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å—É "–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ"</p>
                      )}
                    </td>
                  </tr>
                )}
              </React.Fragment>
            ))}
            {orders.length === 0 && (
              <tr>
                <td colSpan={4} className="py-4 text-center text-gray-500">
                  –ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
                </td>
              </tr>
            )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default BindTTN;
