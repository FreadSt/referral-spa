const { onDocumentCreated } = require("firebase-functions/v2/firestore");
const { defineSecret } = require("firebase-functions/params");
const admin = require("firebase-admin");
const stripeLib = require("stripe");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Admin SDK (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
if (!admin.apps.length) {
  admin.initializeApp();
}

const STRIPE_SECRET_KEY = defineSecret("STRIPE_SECRET_KEY");

exports.cashbackPayment = onDocumentCreated({
  document: "customers/{uid}/payments/{paymentId}",
  secrets: [STRIPE_SECRET_KEY],
}, async (event) => {
  const payment = event.data.data();
  if (!payment) return;

  console.log("üí≥ Processing payment for cashback:", event.params.paymentId);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —É—Å–ø–µ—à–Ω—ã–π payment (—É—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç Run Payments Extension)
  if (payment.status !== "succeeded" && payment.payment_status !== "paid") {
    console.log("‚è≠Ô∏è Skipping: not a successful payment");
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–µ—à–±–µ–∫ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
  if (payment.cashbackProcessed) {
    console.log("‚ÑπÔ∏è Cashback already processed for payment:", event.params.paymentId);
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º Stripe client
  const stripe = stripeLib(STRIPE_SECRET_KEY.value());

  // –ü–æ–ª—É—á–∞–µ–º PaymentIntent –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ metadata
  let paymentIntent;
  try {
    paymentIntent = await stripe.paymentIntents.retrieve(event.params.paymentId, {
      expand: ["latest_charge"]
    });
  } catch (error) {
    console.error("üî• Failed to retrieve PaymentIntent:", error);
    return;
  }

  const metadata = paymentIntent.metadata || {};
  const email = metadata.email;
  if (!email) {
    console.log("‚ÑπÔ∏è No email in payment metadata");
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∏ –∫–µ—à–±–µ–∫–∞
  const referralCode = metadata.referralCode;
  if (!referralCode) {
    console.log("‚ÑπÔ∏è No referral code in metadata");
    return;
  }

  console.log("üîó Processing referral:", referralCode);

  try {
    const referralRef = admin.firestore().collection("referrals").doc(referralCode);
    const referralSnap = await referralRef.get();

    if (!referralSnap.exists) {
      console.warn("‚ö†Ô∏è Invalid referral code:", referralCode);
      return;
    }

    const referral = referralSnap.data();
    if (referral.cashbackSent) {
      console.log("‚ÑπÔ∏è Cashback already sent for referral:", referralCode);
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º email —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ (—Ç–æ–≥–æ, –∫—Ç–æ –ø—Ä–∏–≤–ª–µ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è)
    const referrerEmail = referral.email;
    console.log("üë§ Referrer email:", referrerEmail);

    // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –†–ï–§–ï–†–ï–†–ê –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –µ–º—É –∫–µ—à–±–µ–∫–∞
    const referrerOrdersQuery = await admin.firestore().collection("orders")
      .where("email", "==", referrerEmail)
      .orderBy("createdAt", "desc")
      .limit(1)
      .get();

    if (referrerOrdersQuery.empty) {
      console.warn("‚ö†Ô∏è No order found for referrer email:", referrerEmail);
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º Payment Intent —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    const referrerOrder = referrerOrdersQuery.docs[0].data();
    const referrerPiId = referrerOrder.paymentId;  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ pi_id

    console.log("üí∞ Found referrer order:", referrerPiId);

    // –ü–æ–ª—É—á–∞–µ–º PI —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    const referrerPI = await stripe.paymentIntents.retrieve(referrerPiId);
    const referrerChargedAmount = referrerPI.amount; // –≤ cents

    // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ (–ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ)
    const currentOrderAmount = paymentIntent.amount; // –≤ cents

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–µ—à–±–µ–∫: 10% –æ—Ç —Å—É–º–º—ã –¢–ï–ö–£–©–ï–ì–û –∑–∞–∫–∞–∑–∞
    let refundAmount = Math.floor(currentOrderAmount * 0.1);
    if (refundAmount <= 0) {
      console.log("‚ÑπÔ∏è Refund amount is zero");
      return;
    }

    console.log("üíµ Calculated refund amount:", refundAmount, "cents from current order amount:", currentOrderAmount);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—É—é —Å—É–º–º—É –ø–æ PI —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    const refundsList = await stripe.refunds.list({ payment_intent: referrerPiId });
    const alreadyRefunded = refundsList.data.reduce((sum, r) => sum + r.amount, 0);

    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª—å—à–µ, —á–µ–º –±—ã–ª–æ –∑–∞–ø–ª–∞—á–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º
    if (referrerChargedAmount - alreadyRefunded < refundAmount) {
      refundAmount = referrerChargedAmount - alreadyRefunded;
    }

    if (refundAmount <= 0) {
      console.log("‚ÑπÔ∏è No remaining amount to refund for PI:", referrerPiId);
      return;
    }

    console.log("üí∏ Creating refund of", refundAmount, "cents to PI:", referrerPiId);

    // –í—ã–¥–∞–µ–º refund —Ä–µ—Ñ–µ—Ä—É
    const refund = await stripe.refunds.create({
      payment_intent: referrerPiId,
      amount: refundAmount,
      reason: "requested_by_customer",
      metadata: {
        type: "referral_cashback",
        referral_code: referralCode,
        buyer_payment: event.params.paymentId,
        buyer_email: email,
      },
    });

    console.log("‚úÖ Refund created:", refund.id);

    // –û–±–Ω–æ–≤–ª—è–µ–º referral
    await referralRef.update({
      cashbackSent: true,
      cashbackAmount: refundAmount,
      cashbackAt: admin.firestore.FieldValue.serverTimestamp(),
      cashbackToPayment: referrerPiId,
      refundId: refund.id,
      buyerPayment: event.params.paymentId,
      buyerEmail: email,
    });

    // –ü–æ–º–µ—á–∞–µ–º payment –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–ª—è –∫–µ—à–±–µ–∫–∞
    await event.data.ref.update({
      cashbackProcessed: true,
      cashbackAmount: refundAmount,
      cashbackRefundId: refund.id,
      cashbackProcessedAt: admin.firestore.FieldValue.serverTimestamp(),
    });

    console.log("üí∞ Cashback processed successfully:", {
      referralCode,
      refundAmount,
      refundId: refund.id,
      referrerEmail,
      buyerEmail: email,
    });

  } catch (e) {
    console.error("üî• Error processing cashback for payment:", event.params.paymentId, e);
  }
});
