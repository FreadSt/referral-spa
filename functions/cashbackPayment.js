const { onDocumentCreated } = require("firebase-functions/v2/firestore");
const { defineSecret } = require("firebase-functions/params");
const admin = require("firebase-admin");
const stripeLib = require("stripe");

const STRIPE_SECRET_KEY = defineSecret("STRIPE_SECRET_KEY");

exports.cashbackPayment = onDocumentCreated({
  document: "customers/{uid}/payments/{paymentId}",
  secrets: [STRIPE_SECRET_KEY],
}, async (event) => {
  const payment = event.data.data();
  if (!payment) return;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —É—Å–ø–µ—à–Ω—ã–π payment (–Ω–µ subscription)
  if (payment.mode !== "payment" || payment.payment_status !== "paid") return; // –ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –ø–æ–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ payment_status: "paid")

  const metadata = payment.metadata || {};
  const email = metadata.email; // –ò–∑ metadata, –∫–∞–∫ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ
  if (!email) {
    console.error("üî• No email in metadata for payment:", event.params.paymentId);
    return;
  }

  // –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ "orders"
  try {
    const orderRef = admin.firestore().collection("orders").doc();
    await orderRef.set({
      uid: event.params.uid,
      email,
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      pi_id: event.params.paymentId, // pi_xxx –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
      amount: payment.amount, // amount_total –≤ cents
      currency: payment.currency || "usd",
      metadata, // –î–ª—è –ø–æ–ª–Ω–æ—Ç—ã
    });
    console.log("‚úÖ Order created for payment:", event.params.paymentId);
  } catch (e) {
    console.error("üî• Error creating order:", e);
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∏ –∫–µ—à–±–µ–∫–∞
  const referralCode = metadata.referralCode;
  if (!referralCode) return;

  try {
    const referralRef = admin.firestore().collection("referrals").doc(referralCode);
    const referralSnap = await referralRef.get();
    if (!referralSnap.exists) {
      console.warn("‚ö†Ô∏è Invalid referral code:", referralCode);
      return;
    }

    const referral = referralSnap.data();
    if (referral.cashbackSent) {
      console.log("‚ÑπÔ∏è Cashback already sent for referral:", referralCode);
      return;
    }

    const referrerEmail = referral.email;
    // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π order —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ email
    const ordersQuery = await admin.firestore().collection("orders")
      .where("email", "==", referrerEmail)
      .orderBy("createdAt", "desc")
      .limit(1)
      .get();

    if (ordersQuery.empty) {
      console.warn("‚ö†Ô∏è No order found for referrer email:", referrerEmail);
      return;
    }

    const referrerOrder = ordersQuery.docs[0].data();
    const referrerPiId = referrerOrder.pi_id;
    const stripe = stripeLib(STRIPE_SECRET_KEY.value());

    // –ü–æ–ª—É—á–∞–µ–º PI —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    const pi = await stripe.paymentIntents.retrieve(referrerPiId);
    const chargedAmount = pi.amount; // –≤ cents

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–µ—à–±–µ–∫: 10% –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—É–º–º—ã (–∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ)
    let refundAmount = Math.floor(chargedAmount * 0.1);
    if (refundAmount <= 0) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∂–µ refunded —Å—É–º–º—É
    const refundsList = await stripe.refunds.list({ payment_intent: referrerPiId });
    const alreadyRefunded = refundsList.data.reduce((sum, r) => sum + r.amount, 0);

    if (chargedAmount - alreadyRefunded < refundAmount) {
      refundAmount = chargedAmount - alreadyRefunded; // –ù–µ –±–æ–ª—å—à–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è
    }
    if (refundAmount <= 0) {
      console.log("‚ÑπÔ∏è No remaining amount to refund for PI:", referrerPiId);
      return;
    }

    // –í—ã–¥–∞–µ–º refund
    await stripe.refunds.create({
      payment_intent: referrerPiId,
      amount: refundAmount,
      reason: "requested_by_customer", // –ò–ª–∏ "duplicate" –¥–ª—è –∫–µ—à–±–µ–∫–∞
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º referral
    await referralRef.update({
      cashbackSent: true,
      cashbackAmount: refundAmount,
      cashbackAt: admin.firestore.FieldValue.serverTimestamp(),
      cashbackToPayment: referrerPiId,
    });

    console.log("üí∞ Cashback refunded:", refundAmount, "for referral:", referralCode);
  } catch (e) {
    console.error("üî• Error processing cashback for payment:", event.params.paymentId, e);
  }
});
