const { onDocumentCreated } = require("firebase-functions/v2/firestore");
const { defineSecret } = require("firebase-functions/params");
const admin = require("firebase-admin");
const stripeLib = require("stripe");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Admin SDK (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
if (!admin.apps.length) {
  admin.initializeApp();
}

const STRIPE_SECRET_KEY = defineSecret("STRIPE_SECRET_KEY");

exports.cashbackPayment = onDocumentCreated({
  document: "customers/{uid}/payments/{paymentId}",
  secrets: [STRIPE_SECRET_KEY],
}, async (event) => {
  const payment = event.data.data();
  if (!payment) return;

  console.log("üí≥ Processing payment for cashback:", event.params.paymentId);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —É—Å–ø–µ—à–Ω—ã–π payment (—É—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç Run Payments Extension)
  if (payment.status !== "succeeded" && payment.payment_status !== "paid") {
    console.log("‚è≠Ô∏è Skipping: not a successful payment");
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–µ—à–±–µ–∫ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
  if (payment.cashbackProcessed) {
    console.log("‚ÑπÔ∏è Cashback already processed for payment:", event.params.paymentId);
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º Stripe client
  const stripe = stripeLib(STRIPE_SECRET_KEY.value());

  // –ü–æ–ª—É—á–∞–µ–º PaymentIntent –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ metadata
  let paymentIntent;
  try {
    paymentIntent = await stripe.paymentIntents.retrieve(event.params.paymentId, {
      expand: ["latest_charge"]
    });
  } catch (error) {
    console.error("üî• Failed to retrieve PaymentIntent:", error);
    return;
  }

  const metadata = paymentIntent.metadata || {};
  const email = metadata.email;
  if (!email) {
    console.log("‚ÑπÔ∏è No email in payment metadata");
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∏ –∫–µ—à–±–µ–∫–∞
  const referralCode = metadata.referralCode;
  if (!referralCode) {
    console.log("‚ÑπÔ∏è No referral code in metadata");
    return;
  }

  console.log("üîó Marking referral as pending cashback:", referralCode);

  try {
    const referralRef = admin.firestore().collection("referrals").doc(referralCode);
    const referralSnap = await referralRef.get();

    if (!referralSnap.exists) {
      console.warn("‚ö†Ô∏è Invalid referral code:", referralCode);
      return;
    }

    const referral = referralSnap.data();
    if (referral.cashbackPending || referral.cashbackSent) {
      console.log("‚ÑπÔ∏è Cashback already pending or sent for referral:", referralCode);
      return;
    }

    // –ü–æ–º–µ—á–∞–µ–º referral –∫–∞–∫ pending
    await referralRef.update({
      cashbackPending: true,
      cashbackPendingAt: admin.firestore.FieldValue.serverTimestamp(),
      buyerPayment: event.params.paymentId,
      buyerEmail: email,
    });

    // –ü–æ–º–µ—á–∞–µ–º payment –∫–∞–∫ pending –¥–ª—è –∫–µ—à–±–µ–∫–∞
    await event.data.ref.update({
      cashbackPending: true,
      cashbackPendingAt: admin.firestore.FieldValue.serverTimestamp(),
    });

    console.log("‚úÖ Cashback marked as pending for:", { referralCode, buyerEmail: email });
  } catch (e) {
    console.error("üî• Error marking cashback pending:", e);
  }
});
