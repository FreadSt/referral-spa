const {defineSecret} = require("firebase-functions/params");
const {onCall} = require("firebase-functions/v2/https");
const {onSchedule} = require("firebase-functions/v2/scheduler");
const {onDocumentCreated, onDocumentUpdated} = require("firebase-functions/v2/firestore");
const admin = require("firebase-admin");
const axios = require("axios");
const sendgrid = require("@sendgrid/mail");

// üîê Secrets
const SENDGRID_API_KEY = defineSecret("SENDGRID_API_KEY");
const NOVAPOSHTA_KEY = defineSecret("NOVAPOSHTA_KEY");
const APP_URL = defineSecret("APP_URL");

// üîß Init
admin.initializeApp();

// ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ Firestore —Ç—Ä–∏–≥–≥–µ—Ä
// –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–≥–¥–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –≤ customers/{uid}/payments
exports.onPaymentCreated = onDocumentCreated(
  "customers/{uid}/payments/{paymentId}",
  async (event) => {
    const payment = event.data.data();
    const uid = event.params.uid;
    
    console.log("üéâ New payment received:", {
      uid,
      paymentId: event.params.paymentId,
      amount: payment.amount,
      currency: payment.currency,
      status: payment.status
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω
    if (payment.status !== "succeeded") {
      console.log("Payment not succeeded, skipping processing");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const userRecord = await admin.auth().getUser(uid);
    const email = userRecord.email;

    if (!email) {
      console.error("üî• No email found for user:", uid);
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ Firestore
    const orderRef = admin.firestore().collection("orders").doc(email);
    const orderDoc = await orderRef.get();

    if (!orderDoc.exists) {
      console.error("üî• Order not found for:", email);
      return;
    }

    const orderData = orderDoc.data();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    if (orderData.status === "paid") {
      console.log("Order already processed for:", email);
      return;
    }

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      sendgrid.setApiKey(SENDGRID_API_KEY.value());
      await sendOrderConfirmationEmail(
        email,
        orderData.name,
        orderData.phone,
        orderData.address,
        "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
      await orderRef.update({
        status: "paid",
        paidAt: admin.firestore.FieldValue.serverTimestamp(),
        paymentId: event.params.paymentId,
        stripeCustomerId: payment.customer
      });

      console.log("‚úÖ Order processed successfully for:", email);

    } catch (error) {
      console.error("üî• Error processing payment:", error);
    }
  }
);

// ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–æ–∫
// –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–≥–¥–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –≤ customers/{uid}/subscriptions
exports.onSubscriptionUpdated = onDocumentUpdated(
  "customers/{uid}/subscriptions/{subscriptionId}",
  async (event) => {
    const newData = event.data.after.data();
    const oldData = event.data.before.data();
    const uid = event.params.uid;

    console.log("üì± Subscription updated:", {
      uid,
      subscriptionId: event.params.subscriptionId,
      oldStatus: oldData.status,
      newStatus: newData.status
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–∫–∏
    if (oldData.status !== "active" && newData.status === "active") {
      console.log("üéâ Subscription activated for user:", uid);
      
      const userRecord = await admin.auth().getUser(uid);
      if (userRecord.email) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º welcome email –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        sendgrid.setApiKey(SENDGRID_API_KEY.value());
        await sendSubscriptionWelcomeEmail(userRecord.email);
      }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏
    if (newData.status === "canceled" || newData.status === "incomplete_expired") {
      console.log("‚ùå Subscription canceled for user:", uid);
      
      const userRecord = await admin.auth().getUser(uid);
      if (userRecord.email) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –æ–± –æ—Ç–º–µ–Ω–µ
        sendgrid.setApiKey(SENDGRID_API_KEY.value());
        await sendSubscriptionCanceledEmail(userRecord.email);
      }
    }
  }
);

// ‚úÖ Create NovaPoshta Shipment (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π)
exports.createNovaPoshtaShipment = onCall({
  secrets: [NOVAPOSHTA_KEY, SENDGRID_API_KEY],
}, async (data, context) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
  if (!context.auth) {
    throw new Error("Unauthenticated");
  }

  const {email, name, phone, address} = data.data || {};

  if (!email || !name || !phone || !address) {
    throw new Error("Missing required fields");
  }

  try {
    const response = await axios.post("https://api.novaposhta.ua/v2.0/json/", {
      apiKey: NOVAPOSHTA_KEY.value(),
      modelName: "InternetDocument",
      calledMethod: "save",
      methodProperties: {
        PayerType: "Sender",
        PaymentMethod: "Cash",
        DateTime: new Date().toISOString().split("T")[0],
        CargoType: "Cargo",
        Weight: "1",
        SeatsAmount: "1",
        RecipientCityName: address.split(",")[0].trim(),
        RecipientAddressName: address,
        RecipientName: name,
        RecipientPhone: phone,
      },
    });

    const ttn = response.data.data[0].IntDocNumber;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º TTN –≤ Firestore
    await admin.firestore().collection("ttns").doc(ttn).set({
      email,
      ttn,
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      status: "pending",
      userId: context.auth.uid
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å TTN
    sendgrid.setApiKey(SENDGRID_API_KEY.value());
    await sendOrderConfirmationEmail(email, name, phone, address, ttn);

    return {ttn};

  } catch (error) {
    console.error("üî• NovaPoshta error:", error);
    throw new Error("Failed to create shipment");
  }
});

// ‚úÖ Check Shipment Status (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
exports.checkShipmentStatus = onSchedule({
  schedule: "every 24 hours",
  secrets: [NOVAPOSHTA_KEY],
}, async () => {
  const snapshot = await admin.firestore()
    .collection("ttns")
    .where("status", "==", "pending")
    .get();

  for (const doc of snapshot.docs) {
    const ttnData = doc.data();
    
    try {
      const response = await axios.post("https://api.novaposhta.ua/v2.0/json/", {
        apiKey: NOVAPOSHTA_KEY.value(),
        modelName: "TrackingDocument",
        calledMethod: "getStatusDocuments",
        methodProperties: {
          Documents: [{DocumentNumber: ttnData.ttn}],
        },
      });

      const status = response.data.data[0].Status;
      
      if (status === "Delivered") {
        await admin.firestore().collection("ttns").doc(ttnData.ttn).update({
          status: "delivered",
          deliveredAt: admin.firestore.FieldValue.serverTimestamp(),
        });
      }
    } catch (error) {
      console.error("üî• Error checking TTN status:", ttnData.ttn, error);
    }
  }
});

// ‚úÖ Send Referral Links (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)
exports.sendReferralLinks = onSchedule({
  schedule: "every 24 hours",
  secrets: [APP_URL, SENDGRID_API_KEY],
}, async () => {
  const dateLimit = new Date();
  dateLimit.setDate(dateLimit.getDate() - 17);

  const snapshot = await admin.firestore()
    .collection("ttns")
    .where("status", "==", "delivered")
    .where("deliveredAt", "<=", dateLimit)
    .get();

  for (const doc of snapshot.docs) {
    const ttnData = doc.data();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∞—Å—å
    if (ttnData.referralSent) {
      continue;
    }

    const referralCode = generateReferralCode();

    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
      await admin.firestore().collection("referrals").doc(referralCode).set({
        email: ttnData.email,
        ttn: ttnData.ttn,
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
      sendgrid.setApiKey(SENDGRID_API_KEY.value());
      await sendReferralEmail(ttnData.email, referralCode, APP_URL.value());

      // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ —Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
      await admin.firestore().collection("ttns").doc(ttnData.ttn).update({
        referralSent: true,
        referralSentAt: admin.firestore.FieldValue.serverTimestamp()
      });

    } catch (error) {
      console.error("üî• Error sending referral for TTN:", ttnData.ttn, error);
    }
  }
});

// --- Helper Functions ---

const generateReferralCode = () => 
  Math.random().toString(36).substring(2, 10).toUpperCase();

const sendOrderConfirmationEmail = async (email, name, phone, address, ttn) => {
  const msg = {
    to: "kholiawkodev@gmail.com", // –í–∞—à email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    from: "thiswolfram@gmail.com",
    subject: "üéâ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω",
    html: `
      <h2>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</h2>
      <p><strong>–ò–º—è:</strong> ${name}</p>
      <p><strong>Email:</strong> ${email}</p>
      <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${phone}</p>
      <p><strong>–ê–¥—Ä–µ—Å:</strong> ${address}</p>
      <p><strong>TTN:</strong> ${ttn}</p>
      <hr>
      <p>–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω —á–µ—Ä–µ–∑ Stripe! üéä</p>
    `,
  };
  
  await sendgrid.send(msg);
};

const sendSubscriptionWelcomeEmail = async (email) => {
  const msg = {
    to: email,
    from: "thiswolfram@gmail.com",
    subject: "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–¥–ø–∏—Å–∫—É!",
    html: `
      <h2>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!</h2>
      <p>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.</p>
      <p>–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è–º!</p>
    `,
  };
  
  await sendgrid.send(msg);
};

const sendSubscriptionCanceledEmail = async (email) => {
  const msg = {
    to: email,
    from: "thiswolfram@gmail.com",
    subject: "üò¢ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
    html: `
      <h2>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</h2>
      <p>–ú—ã —Å–æ–∂–∞–ª–µ–µ–º, —á—Ç–æ –≤—ã —Ä–µ—à–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.</p>
      <p>–í—ã –º–æ–∂–µ—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –µ—ë –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.</p>
    `,
  };
  
  await sendgrid.send(msg);
};

const sendReferralEmail = async (email, referralCode, appUrl) => {
  const msg = {
    to: email,
    from: "thiswolfram@gmail.com",
    subject: "üéÅ –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞!",
    html: `
      <h2>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</h2>
      <p>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å—ã:</p>
      <p><strong><a href="${appUrl}/?code=${referralCode}">${appUrl}/?code=${referralCode}</a></strong></p>
      <p>–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∫—É–ø–∫—É!</p>
    `,
  };
  
  await sendgrid.send(msg);
};
