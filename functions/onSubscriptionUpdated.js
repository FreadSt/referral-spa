const { onDocumentUpdated } = require("firebase-functions/v2/firestore");
const admin = require("firebase-admin");
const sendgrid = require("@sendgrid/mail");
const { defineSecret } = require("firebase-functions/params");

const SENDGRID_API_KEY = defineSecret("SENDGRID_API_KEY");

const sendSubscriptionWelcomeEmail = async (email) => {
  try {
    const msg = {
      to: email,
      from: "thiswolfram@gmail.com",
      subject: "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–¥–ø–∏—Å–∫—É!",
      html: `
        <h2>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!</h2>
        <p>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.</p>
      `,
    };
    await sendgrid.send(msg);
  } catch (error) {
    console.error("üî• Subscription welcome email error:", error?.response?.body || error);
  }
};

const sendSubscriptionCanceledEmail = async (email) => {
  try {
    const msg = {
      to: email,
      from: "thiswolfram@gmail.com",
      subject: "üò¢ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
      html: `
        <h2>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</h2>
        <p>–ú—ã —Å–æ–∂–∞–ª–µ–µ–º, —á—Ç–æ –≤—ã —Ä–µ—à–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.</p>
      `,
    };
    await sendgrid.send(msg);
  } catch (error) {
    console.error("üî• Subscription canceled email error:", error?.response?.body || error);
  }
};

exports.onSubscriptionUpdated = onDocumentUpdated({
  document: "customers/{uid}/subscriptions/{subscriptionId}",
  secrets: [SENDGRID_API_KEY],
}, async (event) => {
  const newData = event.data.after.data();
  const oldData = event.data.before.data();
  const uid = event.params.uid;

  try {
    const userRecord = await admin.auth().getUser(uid);
    const email = userRecord.email;

    if (!email) return;

    sendgrid.setApiKey(SENDGRID_API_KEY.value());

    if (oldData?.status !== "active" && newData?.status === "active") {
      await sendSubscriptionWelcomeEmail(email);
    }

    if (newData?.status === "canceled" || newData?.status === "incomplete_expired") {
      await sendSubscriptionCanceledEmail(email);
    }
  } catch (error) {
    console.error("üî• Error processing subscription update:", error);
  }
});
