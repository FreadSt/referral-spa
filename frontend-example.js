// frontend-example.js - –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å Firebase Stripe Payments Extension

import { initializeApp } from 'firebase/app';
import { getAuth, onAuthStateChanged } from 'firebase/auth';
import { 
  getFirestore, 
  collection, 
  doc, 
  addDoc, 
  onSnapshot, 
  query, 
  where, 
  getDocs 
} from 'firebase/firestore';
import { getFunctions, httpsCallable } from 'firebase/functions';
import { useState, useEffect } from 'react';

// Firebase config (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ)
const firebaseConfig = {
  // –≤–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
};

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);
const functions = getFunctions(app);

// üõí 1. –°–û–ó–î–ê–ù–ò–ï CHECKOUT –°–ï–°–°–ò–ò
export const createCheckoutSession = async (priceId, orderData) => {
  const user = auth.currentUser;
  if (!user) throw new Error('User not authenticated');

  // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –Ω–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é
  await doc(db, 'orders', user.email).set({
    ...orderData,
    userId: user.uid,
    createdAt: new Date(),
    status: 'pending'
  });

  // –°–æ–∑–¥–∞–µ–º checkout —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
  const checkoutSessionRef = await addDoc(
    collection(db, `customers/${user.uid}/checkout_sessions`),
    {
      price: priceId, // –Ω–∞–ø—Ä–∏–º–µ—Ä: 'price_1RnK1iQbiHOSieT9wsaQ8nOK'
      success_url: window.location.origin + '/success',
      cancel_url: window.location.origin + '/cancel',
      mode: 'payment', // –∏–ª–∏ 'subscription' –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      allow_promotion_codes: true,
      metadata: {
        orderId: user.email,
        customData: 'any custom data'
      }
    }
  );

  // –°–ª—É—à–∞–µ–º –∫–æ–≥–¥–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Å—Ç URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
  return new Promise((resolve, reject) => {
    const unsubscribe = onSnapshot(checkoutSessionRef, (snap) => {
      const data = snap.data();
      if (data?.error) {
        unsubscribe();
        reject(new Error(data.error.message));
      }
      if (data?.url) {
        unsubscribe();
        resolve(data.url);
      }
    });
  });
};

// üõí 2. –°–û–ó–î–ê–ù–ò–ï –ü–û–î–ü–ò–°–ö–ò
export const createSubscription = async (priceId) => {
  const user = auth.currentUser;
  if (!user) throw new Error('User not authenticated');

  const checkoutSessionRef = await addDoc(
    collection(db, `customers/${user.uid}/checkout_sessions`),
    {
      price: priceId,
      success_url: window.location.origin + '/subscription-success',
      cancel_url: window.location.origin + '/pricing',
      mode: 'subscription',
      trial_period_days: 7, // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    }
  );

  return new Promise((resolve, reject) => {
    const unsubscribe = onSnapshot(checkoutSessionRef, (snap) => {
      const data = snap.data();
      if (data?.error) {
        unsubscribe();
        reject(new Error(data.error.message));
      }
      if (data?.url) {
        unsubscribe();
        resolve(data.url);
      }
    });
  });
};

// üì¶ 3. –ü–û–õ–£–ß–ï–ù–ò–ï –ü–†–û–î–£–ö–¢–û–í –ò –¶–ï–ù
export const getProducts = async () => {
  const productsQuery = query(
    collection(db, 'products'),
    where('active', '==', true)
  );
  
  const querySnapshot = await getDocs(productsQuery);
  
  const products = await Promise.all(
    querySnapshot.docs.map(async (productDoc) => {
      const productData = productDoc.data();
      
      // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
      const pricesSnapshot = await getDocs(
        collection(productDoc.ref, 'prices')
      );
      
      const prices = pricesSnapshot.docs.map(priceDoc => ({
        id: priceDoc.id,
        ...priceDoc.data()
      }));
      
      return {
        id: productDoc.id,
        ...productData,
        prices
      };
    })
  );
  
  return products;
};

// üë§ 4. –ü–û–õ–£–ß–ï–ù–ò–ï –ê–ö–¢–ò–í–ù–´–• –ü–û–î–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
export const getUserSubscriptions = async () => {
  const user = auth.currentUser;
  if (!user) return [];

  const subscriptionsQuery = query(
    collection(db, `customers/${user.uid}/subscriptions`),
    where('status', 'in', ['trialing', 'active'])
  );
  
  const querySnapshot = await getDocs(subscriptionsQuery);
  return querySnapshot.docs.map(doc => ({
    id: doc.id,
    ...doc.data()
  }));
};

// üí≥ 5. –ü–û–õ–£–ß–ï–ù–ò–ï –ò–°–¢–û–†–ò–ò –ü–õ–ê–¢–ï–ñ–ï–ô
export const getPaymentHistory = async () => {
  const user = auth.currentUser;
  if (!user) return [];

  const paymentsSnapshot = await getDocs(
    collection(db, `customers/${user.uid}/payments`)
  );
  
  return paymentsSnapshot.docs.map(doc => ({
    id: doc.id,
    ...doc.data()
  }));
};

// üè¢ 6. –°–û–ó–î–ê–ù–ò–ï CUSTOMER PORTAL (–¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏)
export const createCustomerPortal = async () => {
  const user = auth.currentUser;
  if (!user) throw new Error('User not authenticated');

  const createPortalLink = httpsCallable(
    functions,
    'ext-firestore-stripe-payments-createPortalLink'
  );

  try {
    const result = await createPortalLink({
      returnUrl: window.location.origin
    });
    
    return result.data.url;
  } catch (error) {
    console.error('Error creating portal link:', error);
    throw error;
  }
};

// üîÑ 7. –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ü–û–î–ü–ò–°–ö–ò –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò
export const subscribeToUserSubscriptions = (callback) => {
  const user = auth.currentUser;
  if (!user) return () => {};

  return onSnapshot(
    collection(db, `customers/${user.uid}/subscriptions`),
    (snapshot) => {
      const subscriptions = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
      callback(subscriptions);
    }
  );
};

// üì± 8. –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –í REACT –ö–û–ú–ü–û–ù–ï–ù–¢–ï
export const PaymentComponent = () => {
  const [products, setProducts] = useState([]);
  const [subscriptions, setSubscriptions] = useState([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
    getProducts().then(setProducts);

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        const unsubscribeSubscriptions = subscribeToUserSubscriptions(setSubscriptions);
        return () => unsubscribeSubscriptions();
      } else {
        setSubscriptions([]);
      }
    });

    return unsubscribe;
  }, []);

  const handlePurchase = async (priceId) => {
    setLoading(true);
    try {
      const checkoutUrl = await createCheckoutSession(priceId, {
        name: 'John Doe',
        phone: '+380123456789',
        address: '–ö–∏–µ–≤, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è 123'
      });
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ Stripe Checkout
      window.location.href = checkoutUrl;
    } catch (error) {
      console.error('Payment error:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞');
    } finally {
      setLoading(false);
    }
  };

  const handleManageSubscription = async () => {
    try {
      const portalUrl = await createCustomerPortal();
      window.location.href = portalUrl;
    } catch (error) {
      console.error('Portal error:', error);
    }
  };

  return (
    <div>
      <h2>–ü—Ä–æ–¥—É–∫—Ç—ã</h2>
      {products.map(product => (
        <div key={product.id}>
          <h3>{product.name}</h3>
          <p>{product.description}</p>
          {product.prices.map(price => (
            <button
              key={price.id}
              onClick={() => handlePurchase(price.id)}
              disabled={loading}
            >
              –ö—É–ø–∏—Ç—å –∑–∞ {price.unit_amount / 100} {price.currency.toUpperCase()}
            </button>
          ))}
        </div>
      ))}

      <h2>–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏</h2>
      {subscriptions.length > 0 ? (
        <div>
          {subscriptions.map(sub => (
            <div key={sub.id}>
              <p>–°—Ç–∞—Ç—É—Å: {sub.status}</p>
              <p>–ü–µ—Ä–∏–æ–¥: {new Date(sub.current_period_end * 1000).toLocaleDateString()}</p>
            </div>
          ))}
          <button onClick={handleManageSubscription}>
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
          </button>
        </div>
      ) : (
        <p>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫</p>
      )}
    </div>
  );
};

// üéØ –û–°–ù–û–í–ù–´–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –≠–¢–û–ì–û –ü–û–î–•–û–î–ê:
// ‚úÖ –ù–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å raw body - —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤—Å–µ —Ä–µ—à–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
// ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Stripe
// ‚úÖ –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Firestore
// ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –≤—Å–µ —á–µ—Ä–µ–∑ Firebase Auth
// ‚úÖ –ì–æ—Ç–æ–≤—ã–µ Cloud Functions –¥–ª—è webhook'–æ–≤
// ‚úÖ Customer Portal –∏–∑ –∫–æ—Ä–æ–±–∫–∏
// ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ —Ä–∞–∑–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π